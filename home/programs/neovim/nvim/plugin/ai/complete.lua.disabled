local M = {}

local CONFIG = {
  context_window = 4096,
  after_cursor_filter_length = 30,
  context_ratio = 0.75,
}
--- Get the context around the cursor position for code completion
---@return table Context information with the following fields:
---   - lines_before: string - Text content before cursor, truncated based on context window size
---   - lines_after: string - Text content after cursor, truncated based on context window size
---   - opts: table - Options indicating if context was truncated:
---     - is_incomplete_before: boolean - True if content before cursor was truncated
---     - is_incomplete_after: boolean - True if content after cursor was truncated
local function get_context()
  local line = vim.fn.line('.')
  local lines_before_list = vim.api.nvim_buf_get_lines(0, 0, line, false)
  local lines_after_list = vim.api.nvim_buf_get_lines(0, line + 1, -1, false)

  local lines_before = table.concat(lines_before_list, '\n')
  local lines_after = table.concat(lines_after_list, '\n')

  local n_chars_before = vim.fn.strchars(lines_before)
  local n_chars_after = vim.fn.strchars(lines_after)

  local opts = {
    is_incomplete_before = false,
    is_incomplete_after = false,
  }

  if n_chars_before + n_chars_after > CONFIG.context_window then
    -- use some heuristic to decide the context length of before cursor and after cursor
    if n_chars_before < CONFIG.context_window * CONFIG.context_ratio then
      -- If the context length before cursor does not exceed the maximum
      -- size, we include the full content before the cursor.
      lines_after = vim.fn.strcharpart(lines_after, 0, CONFIG.context_window - n_chars_before)
      opts.is_incomplete_after = true
    elseif n_chars_after < CONFIG.context_window * (1 - CONFIG.context_ratio) then
      -- if the context length after cursor does not exceed the maximum
      -- size, we include the full content after the cursor.
      lines_before = vim.fn.strcharpart(lines_before, n_chars_before + n_chars_after - CONFIG.context_window)
      opts.is_incomplete_before = true
    else
      -- at the middle of the file, use the context_ratio to determine the allocation
      lines_after =
          vim.fn.strcharpart(lines_after, 0, math.floor(CONFIG.context_window * (1 - CONFIG.context_ratio)))

      lines_before = vim.fn.strcharpart(
        lines_before,
        n_chars_before - math.floor(CONFIG.context_window * CONFIG.context_ratio)
      )

      opts.is_incomplete_before = true
      opts.is_incomplete_after = true
    end
  end

  return {
    lines_before = lines_before,
    lines_after = lines_after,
    opts = opts,
  }
end
local uv = vim.uv or vim.loop
local api = vim.api
local fn = vim.fn

local entri_complete = {
  ["1"] = "ONE",
  ["2"] = "TWO",
}

local ComplPreview = require("fzf-lua.previewer.builtin").highlights:extend()

function ComplPreview:new(o, opts, fzf_win)
  ComplPreview.super.new(self, o, opts, fzf_win)
  setmetatable(self, ComplPreview)
  return self
end

function ComplPreview:populate_preview_buf(entry_str)
  local output = vim.split(entri_complete[entry_str], "\n")
  if not self.tmpbuf then
    self.tmpbuf = api.nvim_create_buf(false, true)
    self.listed_buffers[tostring(self.tmpbuf)] = true
  end

  vim.api.nvim_buf_set_lines(self.tmpbuf, 0, -1, false, output)

  -- Preview buffer isn't set on init and after fzf's zero event
  if not self.preview_bufnr then
    self:set_preview_buf(self.tmpbuf)
  end

  -- self.win:update_preview_scrollbar()
end

M.complete = function()
  local ctx = get_context()

  local entries = { "1", "2" }


  require 'fzf-lua'.fzf_exec(entries, {
    previewer = ComplPreview,
  })
end
